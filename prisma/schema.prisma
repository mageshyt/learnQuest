generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String          @id @default(uuid())
  email          String?         @unique
  name           String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  role           Role            @default(USER)
  attributes     Json?
  Course         Course[]
  Purchase       Purchase[]
  Quiz           Quiz[]
  QuizResult     QuizResult[]
  UserProgress   UserProgress[]
  stripeCustomer stripeCustomer?
}

model Course {
  id          String       @id @default(uuid())
  title       String
  description String?
  imageUrl    String?
  userId      String
  price       Float?
  isPublished Boolean      @default(false)
  categoryId  String?
  courseType  COURSE_TYPE  @default(FREE)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  attachments Attachment[]
  chapters    Chapter[]
  category    Category?    @relation(fields: [categoryId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
  purchase    Purchase[]

  @@index([userId])
  @@index([categoryId])
  @@index([courseType])
  @@index([title], map: "title")
}

model Category {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courses   Course[]

  @@index([name])
}

model Attachment {
  id        String   @id @default(uuid())
  name      String?
  url       String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

model Chapter {
  id           String         @id @default(uuid())
  title        String
  description  String?
  videoUrl     String?
  position     Int
  isPublished  Boolean        @default(false)
  isFree       Boolean        @default(false)
  courseId     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  muxData      MuxData?
  Quiz         Quiz[]
  userProgress UserProgress[]

  @@index([courseId])
}

model MuxData {
  id         String   @id @default(uuid())
  playbackId String?
  assetId    String   @unique
  chapterId  String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  trackId    String?
  chapter    Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@index([assetId, playbackId])
  @@index([chapterId])
}

model UserProgress {
  id          String   @id @default(uuid())
  chapterId   String
  userId      String
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  chapter     Chapter  @relation(fields: [chapterId], references: [id])
  User        User     @relation(fields: [userId], references: [id])

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id        String   @id @default(uuid())
  courseId  String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, courseId])
  @@index([userId, courseId])
  @@index([courseId])
}

model stripeCustomer {
  id               String   @id @default(uuid())
  stripeCustomerId String   @unique
  userId           String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Quiz {
  id          String       @id @default(uuid())
  title       String
  userId      String
  chapterId   String?
  questions   Json[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  chapter     Chapter?     @relation(fields: [chapterId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
  result      QuizResult[]
  isCompleted Boolean      @default(false)

  @@index([userId])
  @@index([chapterId])
}

model QuizResult {
  id         String    @id @default(uuid())
  quizId     String
  userId     String
  answers    Json[]
  errorCount Int
  score      Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  quiz       Quiz      @relation(fields: [quizId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
  startTime  DateTime?
  endTime    DateTime? @default(now())

  @@index([quizId])
  @@index([userId])
}

enum Role {
  USER
  ADMIN
  TEACHER
}

enum COURSE_TYPE {
  FREE
  PAID
}
