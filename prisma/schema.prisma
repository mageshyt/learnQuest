// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id             String           @id @default(uuid())
  email          String?          @unique
  name           String?
  attributes     Json?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  role           Role             @default(USER)
  Course         Course[]
  UserProgress   UserProgress[]
  Purchase       Purchase[]
  stripeCustomer stripeCustomer[]
}

model Course {
  id          String  @id @default(uuid())
  title       String  @db.Text
  description String? @db.Text
  imageUrl    String?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  price       Float?
  isPublished Boolean @default(false)

  categoryId String?
  Category   Category? @relation(fields: [categoryId], references: [id])

  courseType COURSE_TYPE @default(FREE)

  chapters    Chapter[]
  Purchase    Purchase[]
  attachments Attachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum COURSE_TYPE {
  FREE
  PAID
}

model Category {
  id        String   @id @default(uuid())
  name      String
  courses   Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attachment {
  id        String   @id @default(uuid())
  name      String?
  url       String   @db.Text
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  muxData MuxData?

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(uuid())
  playbackId String?
  assetId    String

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
}

model UserProgress {
  id        String  @id @default(uuid())
  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id])

  userId String
  // user   User   @relation(fields: [userId], references: [id])

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])

  @@index([userId, chapterId])
}

model Purchase {
  id       String @id @default(uuid())
  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, courseId])
}

model stripeCustomer {
  id               String @id @default(uuid())
  stripeCustomerId String @unique

  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
